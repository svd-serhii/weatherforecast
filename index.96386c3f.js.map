{"mappings":"YAAO,IAAMA,EAAU,mCACVC,EAAW,mDCExB,IACIC,EACAC,EAFEC,EDCG,CACLC,KAAMC,SAASC,cAAc,QAC7BC,KAAMF,SAASC,cAAc,iBAC7BE,KAAMH,SAASC,cAAc,iBAC7BG,UAAWJ,SAASC,cAAc,QAClCI,SAAUL,SAASC,cAAc,QACjCK,IAAKN,SAASC,cAAc,kBCJhCH,EAAKI,KAAKK,iBAAiB,SAAS,WAQlCC,UAAUC,YAAYC,oBAAmB,SAAAC,GACvCb,EAAKM,UAAUQ,MAAQD,EAASE,OAAOT,UAAUU,QAAQ,GACzDhB,EAAKO,SAASO,MAAQD,EAASE,OAAOR,SAASS,QAAQ,GACvDC,QAAQC,IAAIL,E,OARhBb,EAAKK,KAAKI,iBAAiB,SAAS,YAYpC,SAAsBI,GACpBf,EAAME,EAAKM,UAAUQ,MACrBf,EAAMC,EAAKO,SAASO,MACpB,IAAIK,EAAMvB,EACNwB,EAAO,KACPC,EAAQ,SACRC,EAAM,GAAmBC,OAAhB1B,EAAS,SAAkB0B,OAAXxB,EAAI,SAA2BwB,OAApBzB,EAAI,kBAA6ByB,OAAbJ,EAAI,WAAuBI,OAAdF,EAAM,UAAaE,OAALH,GACvFI,MAAMF,GACHG,MAAK,SAAAC,GACJ,IAAKA,EAASC,GAAI,MAAM,IAAIC,MAAMF,EAASG,YAC3C,OAAOH,EAASI,M,IAEjBL,MAAK,SAAAM,GAOV,IAAuBC,EANjBf,QAAQC,IAAIa,GAMKC,EALHD,EAMlB/B,EAAKQ,IAAIyB,UAAYD,EAAEE,IACpBC,KAAI,SAACC,EAAKC,GACT,GAAIA,GAAO,EAAG,CACZ,IAAIC,EAAK,IAAIC,KAAc,IAATH,EAAIE,IAClBE,EAAK,IAAID,KAAmB,IAAdH,EAAIK,SAAgBC,eAClCC,EAAK,IAAIJ,KAAkB,IAAbH,EAAIQ,QAAeF,eACrC,MAAO,iGAKKnB,OAHuBe,EAAGO,eAAe,yFAMpCtB,OAHLa,EAAIU,QAAQ,GAAGC,KAChB,6EAKwBxB,OAHlBa,EAAIU,QAAQ,GAAGE,YAAY,6GAINzB,OADHa,EAAIU,QAAQ,GAAGG,KAAK,uDAErD1B,OADoCa,EAAIc,KAAKC,IAAI,eAIvC5B,OAHVa,EAAIc,KAAKE,IACV,uEAIyC7B,OAF9Ba,EAAIiB,WAAWjB,IAChB,gEAE+Bb,OADAa,EAAIkB,SAAS,4DAEb/B,OADAa,EAAImB,SAAS,2DAERhC,OADLa,EAAIoB,IAAI,+DAERjC,OADe,IAAVa,EAAIqB,IAAU,2DAEvBlC,OADIa,EAAIsB,UAAU,sDAEtDnC,OADoCa,EAAIuB,WAAW,SAGZpC,OAFvCa,EAAIwB,SACL,8DAEuCrC,OADCiB,EAAG,wDACDjB,OAAHoB,EAAG,2F,KAO9CkB,KAAK,I,IA5CLC,MAAM7C,QAAQ8C,M,CA3BjBC,E","sources":["src/js/refs.js","src/js/fetchApi.js"],"sourcesContent":["export const API_KEY = '54314ea03ea88e3952e76d8fb7f8add2';\nexport const BASE_URL = 'https://api.openweathermap.org/data/2.5/forecast';\n\nexport function getRefs() {\n  return {\n    body: document.querySelector('body'),\n    btnP: document.querySelector('#get-location'),\n    btnF: document.querySelector('#get-forecast'),\n    longitude: document.querySelector('.lon'),\n    latitude: document.querySelector('.lat'),\n    row: document.querySelector('.weather .row'),\n  };\n}\n","import { API_KEY, BASE_URL } from './refs';\nimport { getRefs } from './refs';\n\nconst refs = getRefs();\nlet lon;\nlet lat;\nrefs.btnP.addEventListener('click', () => {\n  getLocation();\n});\nrefs.btnF.addEventListener('click', () => {\n  fetchWeather();\n});\n\nfunction getLocation(e) {\n  navigator.geolocation.getCurrentPosition(position => {\n    refs.longitude.value = position.coords.longitude.toFixed(2);\n    refs.latitude.value = position.coords.latitude.toFixed(2);\n    console.log(position);\n  });\n}\n\nfunction fetchWeather(position) {\n  lon = refs.longitude.value;\n  lat = refs.latitude.value;\n  let key = API_KEY;\n  let lang = 'en';\n  let units = 'metric';\n  let url = `${BASE_URL}?lat=${lat}&lon=${lon}&cnt=40&appid=${key}&units=${units}&lang=${lang}`;\n  fetch(url)\n    .then(response => {\n      if (!response.ok) throw new Error(response.statusText);\n      return response.json();\n    })\n    .then(data => {\n      console.log(data);\n      renderWeather(data);\n    })\n    .catch(console.error);\n}\n\nfunction renderWeather(e) {\n  refs.row.innerHTML = e.cnt\n    .map((day, idx) => {\n      if (idx <= 2) {\n        let dt = new Date(day.dt * 1000);\n        let sr = new Date(day.sunrise * 1000).toTimeString();\n        let ss = new Date(day.sunset * 1000).toTimeString();\n        return `<div class=\"col\">\n              <div class=\"card\">\n              <h2 class=\"card-title p-2\">${dt.toDateString()}</h2>\n                <img\n                  src=\"http://openweathermap.org/img/wn/${\n                    day.weather[0].icon\n                  }@4x.png\"\n                  class=\"card-img-top\"\n                  alt=\"${day.weather[0].description}\"\n                />\n                <div class=\"card-body\">\n                  <h3 class=\"card-title\">${day.weather[0].main}</h3>\n                  <p class=\"card-text\">High ${day.temp.max}&deg;C Low ${\n          day.temp.min\n        }&deg;C</p>\n                  <p class=\"card-text\">High Feels like ${\n                    day.feels_like.day\n                  }&deg;C</p>\n                  <p class=\"card-text\">Pressure ${day.pressure}mb</p>\n                  <p class=\"card-text\">Humidity ${day.humidity}%</p>\n                  <p class=\"card-text\">UV Index ${day.uvi}</p>\n                  <p class=\"card-text\">Precipitation ${day.pop * 100}%</p>\n                  <p class=\"card-text\">Dewpoint ${day.dew_point}</p>\n                  <p class=\"card-text\">Wind ${day.wind_speed}m/s, ${\n          day.wind_deg\n        }&deg;</p>\n                  <p class=\"card-text\">Sunrise ${sr}</p>\n                  <p class=\"card-text\">Sunset ${ss}</p>\n                </div>\n              </div>\n            </div>\n          </div>`;\n      }\n    })\n    .join(' ');\n}\n\n//     () => {\n//   let long;\n//   let lat;\n\n//   if (navigator.geolocation) {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       long = position.coords.longitude;\n//       lat = position.coords.latitude;\n//       const base = `${BASE_URL}lat=${lat}&lon=${long}&appid=${API_KEY}&units=metric`;\n\n//       // Using fetch to get data\n//       fetch(base)\n//         .then((response) => {\n//           return response.json();\n//         })\n//         .then((data) => {\n//           console.log(data);\n//           const { temp, feels_like } = data.main;\n//           const place = data.name;\n//           const { description, icon } = data.weather[0];\n//           const { sunrise, sunset } = data.sys;\n\n//           const iconUrl = `https://openweathermap.org/img/wn/${icon}@2x.png`;\n//           // const fahrenheit = (temp * 9) / 5 + 32;\n\n//           // Converting Epoch(Unix) time to GMT\n//           const sunriseGMT = new Date(sunrise * 1000);\n//           const sunsetGMT = new Date(sunset * 1000);\n\n//           // Interacting with DOM to show data\n//           iconImg.src = iconUrl;\n//           loc.textContent = `${place}`;\n//           desc.textContent = `${description}`;\n//           tempC.textContent = `${temp.toFixed(2)} °C`;\n//           // tempF.textContent = `${fahrenheit.toFixed(2)} °F`;\n//           sunriseDOM.textContent = `${sunriseGMT.toLocaleDateString()}, ${sunriseGMT.toLocaleTimeString()}`;\n//           sunsetDOM.textContent = `${sunsetGMT.toLocaleDateString()}, ${sunsetGMT.toLocaleTimeString()}`;\n//         });\n//     });\n//   }\n// });\n\n// fetchWeather() {\n//   let long;\n//   let lat;\n\n//   if (navigator.geolocation) {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       long = position.coords.longitude;\n//       lat = position.coords.latitude;\n//       const base = `${BASE_URL}lat=${lat}&lon=${long}&appid=${API_KEY}&units=metric`;\n\n//       // Using fetch to get data\n//       fetch(base)\n//         .then((response) => {\n//           return response.json();\n//         })\n//         .then((data) => {\n//           console.log(data);\n//           const { temp, feels_like } = data.main;\n//           const place = data.name;\n//           const { description, icon } = data.weather[0];\n//           const { sunrise, sunset } = data.sys;\n\n//           const iconUrl = `https://openweathermap.org/img/wn/${icon}@2x.png`;\n//           // const fahrenheit = (temp * 9) / 5 + 32;\n\n//           // Converting Epoch(Unix) time to GMT\n//           const sunriseGMT = new Date(sunrise * 1000);\n//           const sunsetGMT = new Date(sunset * 1000);\n//         });\n//     };\n//   };\n// }\n"],"names":["$37e33676934ad046$export$a9861bd62f48e142","$37e33676934ad046$export$ca6dda5263526f75","$056c7ba59ad648af$var$lon","$056c7ba59ad648af$var$lat","$056c7ba59ad648af$var$refs","body","document","querySelector","btnP","btnF","longitude","latitude","row","addEventListener","navigator","geolocation","getCurrentPosition","position","value","coords","toFixed","console","log","key","lang","units","url","concat","fetch","then","response","ok","Error","statusText","json","data","e","innerHTML","cnt","map","day","idx","dt","Date","sr","sunrise","toTimeString","ss","sunset","toDateString","weather","icon","description","main","temp","max","min","feels_like","pressure","humidity","uvi","pop","dew_point","wind_speed","wind_deg","join","catch","error","$056c7ba59ad648af$var$fetchWeather"],"version":3,"file":"index.96386c3f.js.map"}